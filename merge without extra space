class Solution:
    def mergeArrays(self, a, b):
        i, j = 0, 0
        result = []
    
        # Merge the two arrays into the result list
        while i < len(a) and j < len(b):
            if a[i] < b[j]:
                result.append(a[i])
                i += 1
            else:
                result.append(b[j])
                j += 1
    
        # Append remaining elements from a[] if any
        while i < len(a):
            result.append(a[i])
            i += 1
    
        # Append remaining elements from b[] if any
        while j < len(b):
            result.append(b[j])
            j += 1
    
        # Now split the merged result into two arrays with specific sizes
        a[:] = result[:len(a)]  # The first `n` elements go to `a`, where `n` is the original size of `a[]`
        b[:] = result[len(a):]  # The remaining elements go to `b`
    
        return a, b



# two pointer method


class Solution:
    def mergeArrays(self,a, b):
        n, m = len(a), len(b)
        i, j = n - 1, 0  # Start from the end of a[] and beginning of b[]

    # Swap elements if `a[i]` is greater than `b[j]`
        while i >= 0 and j < m:
            if a[i] > b[j]:
                a[i], b[j] = b[j], a[i]
            i -= 1
            j += 1
    
        # Sort both arrays to maintain the sorted order
        a.sort()
        b.sort()
    
        return a, b
