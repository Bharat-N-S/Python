class Solution:
    def mergeArrays(self, a, b):
        i, j = 0, 0
        result = []
    
        # Merge the two arrays into the result list
        while i < len(a) and j < len(b):
            if a[i] < b[j]:
                result.append(a[i])
                i += 1
            else:
                result.append(b[j])
                j += 1
    
        # Append remaining elements from a[] if any
        while i < len(a):
            result.append(a[i])
            i += 1
    
        # Append remaining elements from b[] if any
        while j < len(b):
            result.append(b[j])
            j += 1
    
        # Now split the merged result into two arrays with specific sizes
        a[:] = result[:len(a)]  # The first `n` elements go to `a`, where `n` is the original size of `a[]`
        b[:] = result[len(a):]  # The remaining elements go to `b`
    
        return a, b



# two pointer method


class Solution:
    def mergeArrays(self,a, b):
        n, m = len(a), len(b)
        i, j = n - 1, 0  # Start from the end of a[] and beginning of b[]

    # Swap elements if `a[i]` is greater than `b[j]`
        while i >= 0 and j < m:
            if a[i] > b[j]:
                a[i], b[j] = b[j], a[i]
            i -= 1
            j += 1
    
        # Sort both arrays to maintain the sorted order
        a.sort()
        b.sort()
    
        return a, b



# gap method


class Solution:
    def mergeArrays(self,a, b):
        def next_gap(gap):
            if gap <= 1:
                return 0
            return (gap // 2) + (gap % 2)
    
        # Initialize the lengths of the two arrays
        n, m = len(a), len(b)
        gap = next_gap(n + m)  # Calculate the initial gap
    
        # Iterate while gap > 0
        while gap > 0:
    
            # Step 1: Compare within the first array `a`
            i = 0
            while i + gap < n:
                if a[i] > a[i + gap]:
                    a[i], a[i + gap] = a[i + gap], a[i]
                i += 1
    
            # Step 2: Compare between arrays `a` and `b`
            j = gap - n if gap > n else 0 # Start of b
            i = max(0, n - gap)           # Start of a for gap > n
            while i < n and j < m:
                if a[i] > b[j]:
                    a[i], b[j] = b[j], a[i]
                i += 1
                j += 1
    
            # Step 3: Compare within the second array `b`
            j = 0
            while j + gap < m:
                if b[j] > b[j + gap]:
                    b[j], b[j + gap] = b[j + gap], b[j]
                j += 1
    
            # Calculate the next gap
            gap = next_gap(gap)
    
        return a, b
